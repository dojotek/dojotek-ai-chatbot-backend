// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(uuid(7)) @db.Uuid
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  permissions Json?    @db.JsonB
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  users User[]

  @@map("roles")
}

model User {
  id        String   @id @default(uuid(7)) @db.Uuid
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  name      String?  @db.VarChar(255)
  roleId    String   @map("role_id") @db.Uuid
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  role Role @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Setting {
  id          String   @id @default(uuid(7)) @db.Uuid
  key         String   @unique @db.VarChar(255)
  value       String   @db.Text
  description String?  @db.Text
  category    String?  @db.VarChar(100)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("settings")
}

model Knowledge {
  id          String   @id @default(uuid(7)) @db.Uuid
  name        String   @db.VarChar(255)
  description String?  @db.Text
  category    String?  @db.VarChar(100)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  knowledgeFiles KnowledgeFile[]

  @@map("knowledges")
}

model KnowledgeFile {
  id          String   @id @default(uuid(7)) @db.Uuid
  knowledgeId String   @map("knowledge_id") @db.Uuid
  fileName    String   @map("file_name") @db.VarChar(255)
  fileUrl     String   @map("file_url") @db.Text
  fileType    String   @map("file_type") @db.VarChar(50)
  fileSize    Int?     @map("file_size")
  status      String   @default("pending") @db.VarChar(50) // pending, processing, processed, failed
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  knowledge Knowledge @relation(fields: [knowledgeId], references: [id], onDelete: Cascade)

  @@map("knowledge_files")
}

model Customer {
  id          String   @id @default(uuid(7)) @db.Uuid
  name        String   @db.VarChar(255)
  email       String?  @db.VarChar(255)
  phone       String?  @db.VarChar(50)
  address     String?  @db.Text
  industry    String?  @db.VarChar(255)
  description String?  @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  customerStaffs CustomerStaff[]

  @@map("customers")
}

model CustomerStaff {
  id         String   @id @default(uuid(7)) @db.Uuid
  customerId String   @map("customer_id") @db.Uuid
  name       String   @db.VarChar(255)
  email      String?  @db.VarChar(255)
  phone      String?  @db.VarChar(50)
  department String?  @db.VarChar(100)
  position   String?  @db.VarChar(100)
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  customer              Customer                @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerStaffIdentity CustomerStaffIdentity[]

  @@map("customer_staffs")
}

model CustomerStaffIdentity {
  id              String   @id @default(uuid(7)) @db.Uuid
  customerStaffId String   @map("customer_staff_id") @db.Uuid
  platform        String   @db.VarChar(50) // slack, discord, teams, lark, telegram, whatsapp
  platformUserId  String   @map("platform_user_id") @db.VarChar(255)
  platformData    Json?    @map("platform_data") @db.JsonB // additional platform-specific data
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  customerStaff CustomerStaff @relation(fields: [customerStaffId], references: [id], onDelete: Cascade)

  @@unique([platform, platformUserId])
  @@map("customer_staff_identities")
}